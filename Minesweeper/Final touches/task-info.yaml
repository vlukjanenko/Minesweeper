type: edu
files:
- name: src/App.js
  visible: true
  text: |
    import React from 'react';
    import logo from './logo.svg';
    import './App.css';

    function App() {
      return (
        <div className="App">
          <header className="App-header">
            <img src={logo} className="App-logo" alt="logo" />
            <p>
              Edit <code>src/App.js</code> and save to reload.
            </p>
            <a
              className="App-link"
              href="https://reactjs.org"
              target="_blank"
              rel="noopener noreferrer"
            >
              Learn React
            </a>
          </header>
        </div>
      );
    }

    export default App;
  learner_created: false
- name: src/App.css
  visible: true
  text: |
    .App {
      text-align: center;
    }

    .App-logo {
      height: 40vmin;
      pointer-events: none;
    }

    @media (prefers-reduced-motion: no-preference) {
      .App-logo {
        animation: App-logo-spin infinite 20s linear;
      }
    }

    .App-header {
      background-color: #282c34;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      font-size: calc(10px + 2vmin);
      color: white;
    }

    .App-link {
      color: #61dafb;
    }

    @keyframes App-logo-spin {
      from {
        transform: rotate(0deg);
      }
      to {
        transform: rotate(360deg);
      }
    }
  learner_created: false
- name: src/index.js
  visible: true
  text: |
    import React from 'react';
    import ReactDOM from 'react-dom';
    import './index.css';
    import App from './App';

    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById('root')
    );
  learner_created: false
- name: src/logo.svg
  visible: true
  text: |
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
        <g fill="#61DAFB">
            <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
            <circle cx="420.9" cy="296.5" r="45.7"/>
            <path d="M520.5 78.1z"/>
        </g>
    </svg>
  learner_created: false
- name: src/index.css
  visible: true
  text: |
    body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
        sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    code {
      font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
        monospace;
    }
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the test/ subdirectory; learner is supposed to have src3/index.html
    // const pagePath = 'file://' + path.resolve(__dirname, '../src3/index.html');

    const hs = require('hs-test-web');
    const react = require("hs-test-web-server");

    const sleep = (ms) => new Promise(res => setTimeout(res , ms));


    async function stageTest() {
        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--disable-infobar'],
            ignoreDefaultArgs: ['--enable-automation'],
        });

        let result;

        const page = await browser.newPage();
        await page.goto('http://localhost:31328');
        await page.setDefaultNavigationTimeout(0);

        page.on('console', msg => console.log(msg.text()));
        result = await hs.testPage(page,

            () => {
                this.eventFire = function (e, type) {
                    let event = document.createEvent('Event');
                    event.initEvent(type, true, false);
                    e.dispatchEvent(event);
                };

                this.getCellByClass = function (clName, i) {
                    return document.getElementsByClassName(clName)[i]
                };

                this.isCellWithPicture = function (cell) {
                    let backgroundImage = window.getComputedStyle(cell).backgroundImage;
                    return cell.children.length > 0 && cell.children[0].tagName.toLowerCase() === "img" ||
                        backgroundImage !== "none";
                };

                this.elements = {
                    flagCounter: undefined,
                    resetBtn: undefined,
                    clock: undefined
                };

                this.divs = new Map();
                let hoverClasses = new Map();
                Array.from(document.getElementsByTagName("*")).forEach(element => {
                    if (element.children.length > 1 ||
                        element.tagName === "SCRIPT" ||
                        element.tagName === "LINK" ||
                        element.tagName === "META" ||
                        element.tagName === "STYLE" ||
                        element.tagName === "NOSCRIPT") return;

                    let text = element.innerText;

                    if (text.includes('10'))
                        this.elements.flagCounter = element;
                    if (text.includes('0:00'))
                        this.elements.clock = element;
                    if (text === '') {
                        let width = window.getComputedStyle(element).width;
                        let height = window.getComputedStyle(element).height;
                        let divName = element.className;

                        if (width === height)
                            this.divs.has(divName) ?
                                this.divs.set(divName, this.divs.get(divName) + 1) :
                                this.divs.set(divName, 1)
                    }

                    if (window.getComputedStyle(element).cursor === "pointer" && element.className !== "cell") {
                        this.elements.resetBtn = element;
                    }
                });

                if (!this.elements.flagCounter) {
                    return hs.wrong("There should be a flag counter that equals to '10'.")
                }
                if (this.elements.resetBtn === undefined) {
                    return hs.wrong("There should be a reset button and if you hover the mouse over it, the cursor should change to the pointer.")
                }

                if (!this.elements.clock) {
                    return hs.wrong("There should be a timer that equals to '0:00'.")
                }

                return hs.correct()
            },
            () => {
                this.divs = Array.from(this.divs);
                let cellClass = this.divs.find(([k, v]) => v === 72);

                if (!cellClass) {
                  return hs.wrong("The field should contain 72 cells with no inner elements inside.")
                }

                return hs.correct()
            },
            () => {
                let cells = Array.from(document.getElementsByClassName("cell"));

                if (cells.length === 0) {
                    return hs.wrong("Cells should have className='cell'");
                }

                let rows = new Map();
                let columns = new Map();
                cells.forEach(cell => {
                    let top = cell.getBoundingClientRect().top;
                    let left = cell.getBoundingClientRect().left;

                    rows.has(top) ?
                        rows.set(top, rows.get(top) + 1) :
                        rows.set(top, 1);

                    columns.has(left) ?
                        columns.set(left, columns.get(left) + 1) :
                        columns.set(left, 1)
                });

                rows = Array.from(rows);
                let isWrongRow = rows.find(([k, v]) => v !== 8);
                if (isWrongRow) return hs.wrong("Each row of the field should contain 8 cells.");

                columns = Array.from(columns);
                let isWrongColumn = columns.find(([k, v]) => v !== 9);
                if (isWrongColumn) return hs.wrong("Each column of the field should contain 9 cells.")

                return hs.correct()
            },
            async () => {
                /*
            тест счётчика:
                1)клик правой кнопкой на 2 => 8 в счётчике
                2)                ещё на 8 => 0 в счётчике
                3)                попробовать ещё => ничего не изменяется*/


                let arr = [58, 65];
                let res = true;
                arr.forEach((i, ind) => {
                    let cell = this.getCellByClass("cell", i);
                    this.eventFire(cell, 'contextmenu');
                    if (!this.isCellWithPicture(cell)) res = false
                });
                if (!res) return hs.wrong("The flagged cell should look different.");

                if (!this.elements.flagCounter.innerText.includes("8"))
                    return hs.wrong("The flag counter should decrease if you flag the cells.");

                arr = [3,8,14,22,35,38,41,55];
                arr.forEach((i, ind) => {
                    let cell = this.getCellByClass("cell", i);
                    this.eventFire(cell, 'contextmenu');
                });

                if (!this.elements.flagCounter.innerText.includes("0"))
                    return hs.wrong("The flag counter should be 0 if all 10 flags are placed.")

                let zeroCounter = this.elements.flagCounter.innerText;
                arr = [61, 70];
                arr.forEach((i, _) => {
                    let cell = this.getCellByClass("cell", i);
                    this.eventFire(cell, 'contextmenu');
                    if (this.isCellWithPicture(cell)) res = false
                });

                if (!res) return hs.wrong("If you placed all 10 flags, you can't flag cells any more.")

                if (this.elements.flagCounter.innerText !== zeroCounter)
                    return hs.wrong("The flag counter should be 0 if all 10 flags are placed and you try to flag more cells.")

                return hs.correct();
            },
            () => {
                /*тест таймера:
                    1)клик на любую клетку => время пошло
                - случай когда с 1 клика на бомбу => время стоит => проверим есть ли картинка + => перезагрузить страницу и ещё раз

                2)нажимать на все клетки, пока время не остановится (нашли бомбу)
                Если время не остановилось => или таймер не правильный
                или бомб не было(у всех клеток нет background-image или ребенка картинки )*/

                let arr = [58, 65,3,8,14,22,35,38,41,55 ];
                arr.forEach((i, ind) => {
                    let cell = this.getCellByClass("cell", i);
                    this.eventFire(cell, 'contextmenu');
                });
                let cell = this.getCellByClass("cell", 0);
                cell.click();


                return hs.correct();
            },
            async () => {
                let cell = this.getCellByClass("cell", 0);
                let backgroundImage = window.getComputedStyle(cell).backgroundImage
                if (backgroundImage !== 'none' ||
                    cell.children.length > 0 && cell.children[0].tagName.toLowerCase() === 'img'
                ) {
                    return hs.wrong("The first click was on the mine! The field should be reloaded in this case.")
                }


                return hs.correct()
            },
            () => {
                return new Promise((resolve) => {
                    window.setTimeout(() => {
                        if (this.elements.clock.innerText === "0:00") {
                            resolve(hs.wrong("The timer didn't launch when the first click was commited."))
                        }

                        resolve(hs.correct())
                    }, 3000)
                })
            },
            //#test 10
            async () => {
                let k = 0;
                for ( let i = 0; i < 72; i++) {
                    let cell = document.getElementsByClassName("cell")[i];
                    let timerBefore = this.elements.clock.innerText;
                    let backgroundImage = window.getComputedStyle(cell).backgroundImage;
                    cell.click();
                    await setTimeout(() => {}, 300);
                    if (cell.children.length > 0 && cell.children[0].tagName.toLowerCase() === 'img' ||
                        window.getComputedStyle(cell).backgroundImage !== "none"
                    ) {
                        k++;
                    }

                }

                if ( k === 10) {
                    let timerBefore = this.elements.clock.innerText;
                    return new Promise(resolve => {
                        setTimeout(() => {
                            if (this.elements.clock.innerText !== timerBefore) {
                                resolve(hs.wrong("The timer should stop when you click on the cell with mine."))
                            }

                            resolve(hs.correct())
                        }, 1000)

                    })
                } else return hs.wrong("There should be 10 mines on the field, but there are not so many.");
            },
            async () => {
                /*

                тест: идём по всем клеткам, делаем проверку, если клетка открытая
                 (клик по ней правой кнопкой ничего не меняет),то  дальше проверяем:

                если клетка пустая, то вокруг неё все клетки открытые или с цифрами

                если клетка с цифрой, рядом с ней найдётся хотя бы одна закрытая

                если клетка с бомбой, то вокруг неё только клетки с цифрами >= 1 или закрытые
                * */

                let getCellByClass = this.getCellByClass;
                let eventFire = this.eventFire;
                let isCellWithPicture = this.isCellWithPicture;
                let cell = document.getElementsByClassName("cell")[0];
                let border = window.getComputedStyle(cell).border;
                let outline = window.getComputedStyle(cell).outline;
                let backgroundColor = window.getComputedStyle(cell).backgroundColor;

                function isClosedCell (cell) {
                    let cellBorder = window.getComputedStyle(cell).border;
                    let cellOutline = window.getComputedStyle(cell).outline;
                    let cellBackgroundCol = window.getComputedStyle(cell).backgroundColor;
                    if (outline !== cellOutline || border !== cellBorder || backgroundColor !== cellBackgroundCol) return true;

                    return false
                }

                function isOk (i, row, col) {
                    return !(row === 0 && col === 0) &&
                        i + row * 8 + col >= 0 &&
                        i % 8 + col >= 0 && Math.floor(i/8) + row >= 0 &&
                        i % 8 + col < 8 &&  Math.floor(i/8) + row < 9
                }

                async function checkCell(i) {
                    let cell = getCellByClass("cell", i)

                    if (!isCellWithPicture(cell)) {
                        //console.log("checking cell ",i)
                        if (isClosedCell(cell)){
                            //console.log(i," is closed")

                            return true
                        } else {
                            if (cell.innerText) {
                                //with number
                                for (let row = -1; row <= 1; row++) {
                                    for (let col = -1; col <= 1; col++) {
                                        if (isOk(i,row,col)) {
                                            //console.log(i+ row * 8 +col)
                                            let checkCell = getCellByClass("cell",i + row * 8 + col)
                                            if ( isClosedCell(checkCell) || isCellWithPicture(checkCell)) return true
                                        }
                                    }
                                }
                                return false
                            } else {
                                //opened empty
                                for (let row = -1; row <= 1; row++) {
                                    for (let col = -1; col <= 1; col++) {
                                        if (isOk(i,row,col)) {
                                            //console.log(i + row * 8 + col)
                                            let checkCell = getCellByClass("cell",i + row * 8 + col)
                                            if (isClosedCell(checkCell) || isCellWithPicture(checkCell)) return false
                                        }
                                    }
                                }
                                return true
                            }
                        }
                    } else {

                        //bomb check
                        for (let row = -1; row <= 1; row++) {
                            for (let col = -1; col <= 1; col++) {
                                if (isOk(i,row,col)) {
                                    let checkCell = getCellByClass("cell",i + row * 8 + col)
                                    //console.log(i + row * 8 + col)
                                    if (!isClosedCell(checkCell) && !checkCell.innerText && !isCellWithPicture(checkCell)) return false
                                }
                            }
                        }

                        return true
                    }
                }

                for (let i=0; i<72; i++) {
                    let res = await checkCell(i);
                    if (!res) return hs.wrong("If you clicked on a cell with n mines around it, it should show n.\n" +
                        "If you clicked on a cell with no bombs around it, it should open an area.")
                }

                return hs.correct()
            },
            () => {
                this.elements.resetBtn.click();
                for (let i=0; i<8; i++) {
                    let cell = this.getCellByClass("cell", i);
                    if (cell.innerText) {
                        return hs.wrong("The reset button doesn't work!")
                    }
                }
                return hs.correct()
            }

        );

        await sleep(15000);
        await browser.close();
        return result
    }

    jest.setTimeout(180000);
    test("Test stage", async () => {
        let result = await react.startServerAndTest(
            'localhost', 31328, path.resolve(__dirname, '..'), stageTest
        );

        if (result['type'] === 'wrong') {
            fail(result['message']);
        }
    });
  learner_created: false
- name: src/fired.svg
  visible: true
  text: |-
    <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
    <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="94px" height="94px" viewBox="0 0 940 940" preserveAspectRatio="xMidYMid meet">
    <g id="layer101" fill="#ffffff" stroke="none">
     <path d="M20 895 l0 -34 58 -3 58 -3 -68 -165 c-37 -90 -65 -166 -63 -168 2 -3 26 13 52 34 26 22 55 45 64 52 14 10 12 -10 -12 -130 -16 -78 -28 -147 -26 -152 2 -5 32 25 66 67 35 43 65 77 66 77 1 0 -15 -100 -36 -222 -21 -122 -37 -224 -35 -226 3 -2 59 87 125 198 131 220 128 219 133 92 l3 -64 49 67 49 67 65 -153 c36 -84 67 -148 69 -143 1 5 -8 100 -20 212 -13 111 -21 202 -18 202 3 -1 24 -19 46 -40 22 -22 41 -35 43 -30 2 6 -1 33 -7 61 -6 29 -10 53 -9 54 2 2 61 -46 131 -107 71 -60 130 -108 132 -106 2 1 -50 104 -115 228 -66 123 -118 225 -117 227 2 1 25 -4 52 -12 75 -23 83 -20 49 18 -69 75 -68 72 -16 72 46 0 47 1 50 33 l3 32 -410 0 -411 0 0 -35z m592 -114 c16 -40 27 -75 25 -77 -1 -2 -28 12 -60 31 l-56 34 -3 -82 -3 -82 -23 43 c-12 23 -27 40 -32 37 -4 -3 -14 11 -20 31 l-12 36 -41 -76 c-27 -50 -44 -72 -49 -63 -4 6 -8 47 -8 90 0 42 -3 77 -6 77 -3 0 -26 -16 -50 -36 -50 -41 -50 -42 -37 64 l6 52 170 -2 169 -3 30 -74z"/>
     </g>

    </svg>
  learner_created: true
- name: src/target.svg
  visible: true
  text: |-
    <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
    <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="128px" height="128px" viewBox="0 0 1280 1280" preserveAspectRatio="xMidYMid meet">
    <g id="layer101" fill="#ffffff" stroke="none">
     <path d="M530 1054 c-106 -28 -222 -120 -270 -214 -85 -166 -59 -367 65 -499 98 -105 201 -146 344 -139 115 7 185 35 260 104 115 106 157 207 149 355 -4 70 -12 101 -36 154 -36 75 -124 170 -190 204 -97 50 -218 63 -322 35z m263 -112 c65 -33 128 -97 162 -166 24 -48 28 -70 28 -140 1 -74 -3 -91 -31 -149 -38 -76 -92 -129 -171 -165 -80 -37 -192 -37 -272 0 -146 67 -223 210 -198 366 20 128 110 231 239 273 14 5 63 7 110 6 66 -2 96 -7 133 -25z"/>
     <path d="M562 881 c-184 -64 -239 -294 -104 -430 107 -107 266 -108 372 -1 72 71 94 155 68 258 -17 68 -104 155 -177 176 -69 20 -93 20 -159 -3z m176 -108 c48 -35 72 -81 72 -135 0 -101 -53 -159 -151 -166 -46 -3 -65 0 -97 18 -117 66 -107 247 18 299 38 16 127 7 158 -16z"/>
     <path d="M584 696 c-59 -50 -19 -150 61 -150 80 0 120 100 61 150 -17 15 -40 24 -61 24 -21 0 -44 -9 -61 -24z"/>
     </g>

    </svg>
  learner_created: true
- name: src/bomb.svg
  visible: true
  text: |-
    <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
    <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="484px" height="500px" viewBox="0 0 4840 5000" preserveAspectRatio="xMidYMid meet">
    <g id="layer101" fill="#010000" stroke="none">
    <path d="M1893 4984 c-481 -58 -916 -269 -1256 -609 -575 -575 -782 -1444 -527 -2215 175 -529 557 -969 1066 -1227 395 -201 824 -273 1284 -218 l55 7 33 -55 c39 -67 78 -102 157 -138 109 -50 243 -58 417 -22 l77 16 81 -74 c287 -261 586 -388 965 -409 86 -5 171 -15 199 -24 66 -22 112 -20 152 5 29 17 34 26 34 58 l0 38 101 18 c79 13 99 20 95 32 -3 8 -40 58 -82 113 l-76 98 51 76 c28 41 51 79 51 84 0 5 -29 29 -65 52 -69 45 -66 40 -95 170 -7 30 -14 58 -16 62 -3 4 -61 -20 -130 -53 -112 -53 -132 -59 -187 -59 -170 1 -378 75 -484 172 l-21 20 33 47 c86 121 130 252 123 367 -4 59 -11 83 -41 137 l-37 65 86 128 c190 284 315 626 354 969 13 116 13 364 0 480 -95 831 -657 1524 -1451 1789 -307 102 -639 137 -946 100z"/>
    </g>
    <g id="layer102" fill="#67082a" stroke="none">
    <path d="M1906 4849 c-917 -125 -1607 -805 -1741 -1714 -22 -145 -22 -405 0 -550 65 -444 269 -849 585 -1165 292 -292 648 -477 1070 -556 114 -21 439 -30 566 -15 54 6 100 13 102 15 2 2 -15 32 -37 67 -62 98 -74 128 -78 204 -5 80 20 163 78 261 47 79 168 206 264 277 71 53 244 145 332 178 18 6 30 16 26 22 -3 5 -1 7 4 4 6 -4 35 -2 64 3 84 17 269 14 331 -4 97 -28 140 -64 203 -170 48 -80 60 -94 72 -84 29 24 145 210 202 325 280 559 282 1207 6 1768 -117 238 -251 422 -433 596 -292 279 -632 449 -1047 525 -106 19 -464 28 -569 13z"/>
    <path d="M3225 1790 c-76 -11 -200 -56 -293 -105 -283 -150 -476 -378 -460 -543 4 -37 21 -75 77 -168 40 -65 77 -128 84 -139 72 -124 90 -145 146 -172 48 -24 68 -28 141 -28 84 0 206 20 216 36 2 4 -18 39 -45 76 -130 179 -144 227 -91 319 53 93 155 161 274 183 113 21 153 1 231 -118 35 -53 77 -111 93 -130 l29 -35 42 54 c24 30 57 81 74 114 26 51 31 73 32 132 l0 70 -118 197 c-127 213 -149 236 -237 256 -51 12 -121 12 -195 1z"/>
    </g>
    <g id="layer103" fill="#423728" stroke="none">
    <path d="M3249 1141 c-93 -36 -179 -112 -179 -158 0 -20 99 -184 131 -217 18 -19 18 -19 13 2 -5 17 -2 20 14 16 13 -4 19 -15 20 -35 0 -20 -3 -27 -11 -22 -22 13 93 -115 157 -175 62 -58 197 -157 263 -195 30 -16 32 -16 36 0 4 15 5 14 6 -3 1 -16 18 -27 79 -52 111 -46 193 -73 203 -66 5 3 18 0 29 -6 17 -9 19 -8 13 7 -5 16 -4 15 9 -1 9 -11 24 -21 34 -22 11 -2 39 -6 64 -9 25 -3 55 -9 68 -12 14 -3 22 -1 22 8 0 10 3 11 8 3 4 -7 50 -14 112 -16 58 -3 112 -8 121 -12 13 -6 18 1 23 32 6 40 20 52 57 52 18 0 17 5 -13 45 -18 25 -37 51 -42 59 -6 9 4 32 32 74 l42 60 -35 21 c-25 14 -35 27 -35 45 0 35 -12 38 -62 16 -70 -31 -267 -28 -387 6 -44 13 -55 13 -62 2 -7 -10 -9 -9 -9 5 0 9 -5 17 -11 17 -5 0 -7 -4 -4 -10 3 -5 2 -10 -3 -10 -5 0 -12 9 -15 20 -3 11 -14 20 -24 20 -11 0 -46 16 -79 36 -32 20 -63 36 -67 37 -11 3 -69 52 -140 119 -33 32 -64 55 -69 52 -4 -3 -7 -1 -6 4 2 5 -27 49 -63 98 -36 49 -72 100 -79 113 -12 23 -14 23 -25 8 -11 -16 -13 -16 -19 -2 -3 9 1 18 10 22 13 5 13 8 -2 24 -21 24 -65 24 -125 0z m263 -345 c-9 -18 -22 -31 -29 -29 -15 6 -5 33 12 33 7 0 15 7 19 15 3 8 8 15 10 15 3 0 -2 -15 -12 -34z"/>
    </g>
    <g id="layer104" fill="#c91051" stroke="none">
    <path d="M1906 4849 c-555 -76 -1033 -352 -1354 -782 -268 -359 -404 -764 -404 -1207 0 -390 98 -724 314 -1075 271 -442 695 -755 1198 -886 149 -38 247 -51 436 -56 165 -5 377 7 392 21 2 2 -8 23 -23 45 -25 40 -52 58 -104 67 -58 11 -124 63 -152 120 -89 184 129 477 487 657 140 70 318 126 328 103 3 -7 5 -7 5 2 1 6 9 12 19 12 15 0 15 -2 2 -11 -12 -9 -12 -10 3 -5 10 3 21 6 23 6 3 0 2 5 -2 12 -4 7 -3 8 4 4 6 -4 30 -2 52 4 63 17 279 15 341 -4 98 -28 141 -64 204 -170 48 -80 60 -94 72 -84 29 24 145 210 202 325 280 559 282 1207 6 1768 -117 238 -251 422 -433 596 -292 279 -632 449 -1047 525 -106 19 -464 28 -569 13z m496 -75 c62 -8 142 -22 178 -31 75 -17 283 -83 278 -88 -1 -2 -48 -11 -103 -20 -855 -145 -1568 -755 -1841 -1575 -78 -235 -113 -435 -121 -695 -10 -347 48 -662 183 -982 24 -58 44 -108 44 -110 0 -13 -109 76 -203 167 -179 172 -299 332 -400 535 -139 280 -196 506 -204 820 -9 349 52 625 207 935 100 200 213 353 381 515 307 297 687 480 1109 534 113 15 372 12 492 -5z"/>
    <path d="M3233 1791 c-24 -4 -45 -10 -48 -13 -4 -3 16 -46 43 -95 54 -97 132 -249 132 -258 0 -3 -7 -5 -15 -5 -8 0 -43 -11 -77 -25 -35 -13 -69 -26 -75 -27 -14 -3 -169 313 -165 335 8 36 -150 -33 -221 -96 -18 -16 -27 -26 -21 -23 9 4 84 -140 165 -318 11 -23 5 -31 -88 -123 -97 -95 -173 -203 -188 -265 -4 -15 -13 -32 -21 -38 -14 -13 -14 -15 39 -102 43 -71 114 -103 227 -103 84 0 206 20 216 36 2 4 -18 39 -45 76 -130 179 -144 227 -91 319 53 93 155 161 274 183 113 21 153 1 231 -118 35 -53 77 -111 93 -130 l29 -35 42 54 c24 30 57 81 74 114 26 51 31 73 32 132 l0 70 -118 197 c-127 213 -149 236 -237 256 -50 12 -123 12 -187 2z"/>
    </g>
    <g id="layer105" fill="#ccab7f" stroke="none">
    <path d="M3249 1141 c-94 -37 -179 -112 -179 -159 0 -26 118 -204 131 -197 5 4 9 17 9 30 0 54 51 184 95 245 25 33 52 63 61 67 24 9 -4 33 -40 33 -17 -1 -52 -9 -77 -19z"/>
    <path d="M3363 1058 c-57 -61 -97 -164 -109 -286 l-6 -70 88 -88 88 -89 7 90 c8 104 37 204 74 258 15 21 25 41 23 45 -8 18 -122 172 -128 172 -3 0 -20 -15 -37 -32z"/>
    <path d="M3542 848 c-41 -69 -56 -138 -57 -257 l0 -113 32 -27 c34 -28 127 -86 156 -97 16 -6 17 -2 10 37 -14 75 -7 220 11 269 10 25 19 52 22 60 2 9 -26 43 -75 88 l-79 72 -20 -32z"/>
    <path d="M3752 683 c-15 -29 -32 -120 -32 -171 1 -68 25 -181 42 -199 15 -14 176 -73 202 -73 11 0 8 18 -12 73 -26 74 -36 204 -20 272 7 29 5 31 -74 70 -45 22 -84 41 -89 43 -4 2 -12 -5 -17 -15z"/>
    <path d="M3979 573 c-22 -59 -3 -205 40 -305 21 -50 24 -52 136 -64 55 -6 58 -5 40 9 -22 17 -21 18 15 34 l25 10 -33 17 c-34 18 -36 27 -16 79 3 10 -5 21 -25 33 -37 22 -38 30 -10 60 14 15 22 37 23 66 l2 44 -94 20 -94 21 -9 -24z"/>
    </g>
    <g id="layer106" fill="#fbebf1" stroke="none">
    <path d="M3283 3556 c-153 -50 -261 -186 -270 -340 -4 -63 -1 -77 24 -126 62 -122 211 -143 351 -50 190 128 236 388 86 493 -49 34 -128 44 -191 23z"/>
    <path d="M3343 2899 c-211 -36 -410 -215 -491 -441 -35 -100 -37 -245 -3 -330 29 -76 98 -150 169 -185 51 -25 68 -28 157 -27 81 0 112 5 160 24 212 83 379 280 422 499 30 149 -5 281 -99 373 -76 74 -197 107 -315 87z"/>
    </g>


    </svg>
  learner_created: true
feedback_link: https://hyperskill.org/projects/108/stages/590/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 10 Apr 2021 05:37:36 UTC
record: -1
